const BoardColumn = require('../models/BoardColumn');
const Board = require('../models/Board');

// üì• –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É
exports.createColumn = async (req, res) => {
  try {
    const boardId = req.params.boardId;
    const column = await BoardColumn.create(req.body);

    await Board.findByIdAndUpdate(boardId, {
      $push: { columns: column._id, columnOrder: column._id.toString() }
    });

    res.status(201).json(column);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏', error: err.message });
  }
};

// üì§ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É
exports.getColumnById = async (req, res) => {
  try {
    const column = await BoardColumn.findById(req.params.id).populate('tasks');

    if (!column) {
      return res.status(404).json({ message: '–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json(column);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏', error: err.message });
  }
};

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É
exports.updateColumn = async (req, res) => {
  try {
    const column = await BoardColumn.findByIdAndUpdate(req.params.id, req.body, { new: true });

    if (!column) {
      return res.status(404).json({ message: '–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json(column);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏', error: err.message });
  }
};

// üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É
exports.deleteColumn = async (req, res) => {
  try {
    const column = await BoardColumn.findByIdAndDelete(req.params.id);

    if (!column) {
      return res.status(404).json({ message: '–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json({ message: '–ö–æ–ª–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏', error: err.message });
  }
};
